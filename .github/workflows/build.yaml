name: Build Docker Image

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      REGISTRY: index.docker.io
      IMAGE_NAME: bdehamer/hello
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version-file: .node-version
          cache: "npm"
      - name: Install Dependencies
        run: npm ci
      - name: Build artifact
        run: echo "hello!" > greeting.txt
      - name: Build Dockerfile
        run: |
          cat <<EOF > Dockerfile
          FROM scratch
          COPY greeting.txt .
          EOF
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.BDEHAMER_DOCKER_HUB_TOKEN }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - name: subject
        run: |
          jq --null-input \
            --arg digest ${{ steps.push.outputs.digest }} \
            --arg name ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            '{"name": $name, "digest": { "sha256": $digest }}' >> subject.json
          cat subject.json | jq
      - name: predicate
        run: |
          node -r @actions/attest -e 'console.log(JSON.stringify(require("@actions/attest").buildSLSAProvenancePredicate()))' > predicate.json
          cat predicate.json | jq
      - name: statement
        run: |
          jq --null-input -c \
            --argjson subject $(cat subject.json | jq -c) \
            --argjson predicate $(cat predicate.json | jq -c '.params') \
            --arg predicateType $(cat predicate.json | jq -c '.type') \
            '{"_type": "https://in-toto.io/Statement/v1","subject":[$subject],"predicateType":$predicateType,"predicate":$predicate}' > statement.json
          cat statement.json | jq
      - name: attest
        run: |
          npx sigstore attest statement.json -o bundle.json
          cat bundle.json | jq
